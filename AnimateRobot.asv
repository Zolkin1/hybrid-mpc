function AnimateRobot(robot, t, q, pos, te, qe, ve)
%ANIMATEROBOT Animates the robot
%   

qd = zeros(robot.nv, 1);

figure;
title("Robot Animation")
xlabel("x (m)")
ylabel("y (m)")

offset = zeros(2,1);

for i = 1:length(t)
    clf;
    % Compute FK to get all the ends of the links
    joint_positions = zeros(2, robot.nq);
    link_positions = zeros(2, robot.nq);
    for j = 1:robot.nq
        joint_positions(:,j) = ForwardKinematics(robot, q(:, i), qd, j, [0;0]);
        link_positions(:, j) = ForwardKinematics(robot, q(:, i), qd, j, robot.link{j});
    end

    if i ~= 1 && t(i) > te && t(i-1) < te
        offse
    end

    hold on;
    xlim([-2, 2]);
    ylim([-2, 2]);
    axis equal;
    for j = 1:robot.nq
        plot([joint_positions(1,j), link_positions(1,j)], [joint_positions(2,j), link_positions(2,j)], ...
            "Color", "#0072BD", "LineWidth", 2);
        scatter(joint_positions(1,j), joint_positions(2,j), [], [0.6350 0.0780 0.1840], "filled");
    end
    scatter(pos(1,i), pos(2,i), [], [0.4940 0.1840 0.5560], "filled");
    PlotGround(-2, 2);


    % Put it at the correct position
    pos_diff = pos(:,i) - joint_positions(:, 3)
    %pos_diff(2) = 0;
    
    for j = 1:robot.nq
        joint_positions(:,j) = joint_positions(:,j) + pos_diff;
        link_positions(:, j) = link_positions(:, j) + pos_diff;
    end
    for j = 1:robot.nq
        plot([joint_positions(1,j), link_positions(1,j)], [joint_positions(2,j), link_positions(2,j)], ...
            "Color", "#0072BD", "LineWidth", 2);
        scatter(joint_positions(1,j), joint_positions(2,j), [], [0.6350 0.0780 0.1840], "filled");
    end

    drawnow limitrate;
    pause(.3)
end
hold off;

% Use the robot data to get the lengths of all the links

% Plot the ground

% Draw the robot

% Update the time

end

function PlotGround(lower_lim, upper_lim)
    plot([lower_lim, upper_lim], [0, 0], "Color", "k", "LineWidth", 2);
end

